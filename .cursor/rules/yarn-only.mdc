---
description: 强制使用 Yarn 包管理器，禁止使用 npm，并限制命令执行权限
alwaysApply: true
---

# Yarn Package Manager Rule

## 强制使用 Yarn

**重要：本项目必须使用 Yarn 而不是 npm 来管理依赖。**

### 背景
本项目使用 Tailwind CSS v4，它依赖 LightningCSS 引擎。在 Windows 系统上，npm 处理 LightningCSS 的原生二进制模块时存在兼容性问题，会导致以下错误：

```
Error: Cannot find module '../lightningcss.win32-x64-msvc.node'
```

### 规则

1. **始终使用 Yarn 命令**：
   - ✅ `yarn install` 而不是 `npm install`
   - ✅ `yarn add package-name` 而不是 `npm install package-name`
   - ✅ `yarn remove package-name` 而不是 `npm uninstall package-name`
   - ✅ `yarn dev` 而不是 `npm run dev`
   - ✅ `yarn build` 而不是 `npm run build`

2. **项目脚本命令**：
   ```bash
   yarn dev          # 开发环境
   yarn build        # 构建生产版本
   yarn start        # 启动生产服务器
   yarn lint         # 代码检查
   yarn typecheck    # 类型检查
   yarn clean        # 清理缓存
   yarn clean:all    # 完全清理
   ```

3. **依赖管理**：
   - 添加依赖：`yarn add package-name`
   - 添加开发依赖：`yarn add -D package-name`
   - 移除依赖：`yarn remove package-name`
   - 更新依赖：`yarn upgrade package-name`

4. **禁止的操作**：
   - ❌ 不要使用任何 `npm` 命令
   - ❌ 不要创建或修改 `package-lock.json`
   - ❌ 不要混用 npm 和 Yarn

### 🚫 命令执行限制

**重要：不要自动执行任何启动命令！**

当需要运行以下命令时，**不要直接执行**，而是告诉用户让他们手动运行：

- `yarn dev` - 开发服务器启动
- `yarn build` - 生产构建
- `yarn start` - 生产服务器启动
- 任何长时间运行的进程

**正确做法**：
- ✅ 告诉用户："请在终端中运行 `yarn dev` 来启动开发服务器"
- ✅ 提供命令建议，但让用户自己执行
- ❌ 不要使用 `run_terminal_cmd` 执行这些命令

**例外情况**（可以执行的命令）：
- `yarn install` - 安装依赖
- `yarn lint` - 代码检查
- `yarn typecheck` - 类型检查
- `yarn clean` - 清理缓存
- 其他不会启动服务器的短期命令

### 相关文件
- [package.json](mdc:package.json) - 项目依赖配置
- [README.md](mdc:README.md) - 包含详细的 Yarn 使用说明和故障排除

### 故障排除
如果遇到构建问题：
1. 清理依赖：`rm -rf node_modules yarn.lock`
2. 重新安装：`yarn install`
3. 尝试构建：`yarn build`

### 注意事项
- 确保团队所有成员都使用 Yarn
- 在 CI/CD 环境中也要使用 Yarn
- 如果需要全局安装包，使用：`yarn global add package-name`
- 用户通常在自己的终端中管理开发服务器，不需要 AI 代为执行