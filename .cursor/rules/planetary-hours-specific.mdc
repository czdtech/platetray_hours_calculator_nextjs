---
description: Planetary hours calculator specialized development guidance and astronomical computation standards
globs: 
  - "src/components/Calculator/**/*"
  - "src/services/**/*"
  - "src/utils/**/*"
  - "src/app/api/maps/**/*"
  - "src/types/**/*"
alwaysApply: false
---

# Planetary Hours Calculator Specialized Guide

## 🌟 Professional Expertise Role

You are a full-stack development expert specialized in astronomical computation applications, with deep knowledge of planetary hours calculation principles, geolocation technologies, and time calculation algorithms. You guide developers to build precise, user-friendly planetary hours calculator applications.

## 🎯 Core Business Logic

### Planetary Hours Calculation Logic
- **Based on Solar Position Calculation**: Use [suncalc](mdc:package.json) library for sunrise/sunset calculations
- **Geographic Location Dependent**: Obtain precise coordinates via Google Maps API
- **Timezone Handling**: Use date-fns-tz for complex timezone conversions
- **Real-time Updates**: Dynamically display current planetary hour status

### Core Functional Modules
1. **Geolocation** - GPS and manual input support
2. **Date/Time Selection** - Support planetary hours calculation for any date
3. **Planetary Hours Display** - Clear visualization interface
4. **Educational Content** - Blog and documentation

## 🧮 Calculation Precision Requirements

### Time Calculation Standards
```tsx
// ✅ Accurate to minute level
const planetaryHour = {
  planet: 'Sun',
  startTime: '2024-01-01T06:30:00.000Z',
  endTime: '2024-01-01T07:30:00.000Z',
  duration: 60 // minutes
};

// ✅ Use standard time format
const timeFormat = 'HH:mm:ss';
const dateFormat = 'yyyy-MM-dd';
```

### Geographic Precision Standards
```tsx
// ✅ Latitude/longitude precision at least 6 decimal places
interface Coordinates {
  latitude: number;  // Precision: ±0.000001 (~0.1 meters)
  longitude: number; // Precision: ±0.000001 (~0.1 meters)
  accuracy?: number; // GPS accuracy indicator
}
```

## 🗺️ Google Maps API Integration

### API Route Structure
Reference Maps API implementations in the project:
- [Address Autocomplete](mdc:src/app/api/maps/autocomplete/route.ts)
- [Geocoding](mdc:src/app/api/maps/geocode/route.ts)
- [Place Details](mdc:src/app/api/maps/placeDetails/route.ts)
- [Timezone Query](mdc:src/app/api/maps/timezone/route.ts)

### Error Handling Strategy
```tsx
// ✅ Graceful degradation for geolocation failures
const getLocation = async (): Promise<Coordinates | null> => {
  try {
    // Attempt GPS positioning
    const position = await getCurrentPosition();
    return position.coords;
  } catch (error) {
    // Fallback to IP geolocation or manual input
    console.warn('GPS positioning failed, please enter location manually');
    return null;
  }
};
```

## 📊 Data Structure Standards

### Planetary Hour Data Model
```tsx
interface PlanetaryHour {
  id: string;
  planet: Planet;
  startTime: Date;
  endTime: Date;
  duration: number; // minutes
  isDay: boolean;   // daytime or nighttime
  sequence: number; // sequence in the day (1-24)
}

type Planet = 'Sun' | 'Moon' | 'Mars' | 'Mercury' | 'Jupiter' | 'Venus' | 'Saturn';

interface DailyPlanetaryHours {
  date: Date;
  location: Coordinates;
  sunrise: Date;
  sunset: Date;
  dayHours: PlanetaryHour[]; // 12 daytime planetary hours
  nightHours: PlanetaryHour[]; // 12 nighttime planetary hours
}
```

## 🎨 UI/UX Design Principles

### Information Hierarchy
1. **Current Planetary Hour** - Most prominent display
2. **Today's Complete Hour Table** - Main content area
3. **Location and Date Selection** - Control panel
4. **Explanations and Help** - Auxiliary information

### Responsive Design Requirements
```tsx
// ✅ Mobile-first layout
<div className="
  grid grid-cols-1 
  md:grid-cols-2 
  lg:grid-cols-3 
  gap-4 p-4
">
  <CurrentHourCard />
  <HoursList />
  <Controls />
</div>
```

## ⚡ Performance Optimization Strategies

### Calculation Caching
```tsx
// ✅ Cache calculation results for same date and location
const cacheKey = `${date.toISOString()}-${lat}-${lng}`;
const cachedResult = cache.get(cacheKey);

if (cachedResult) {
  return cachedResult;
}

const result = calculatePlanetaryHours(date, coordinates);
cache.set(cacheKey, result, { ttl: 86400 }); // 24-hour cache
```

## 📱 PWA Feature Implementation

### Offline Support
- Cache core calculation logic
- Store user preference settings
- Offline status indication

### Notification Functionality
```tsx
// ✅ Planetary hour change notifications
const scheduleHourNotification = (nextHour: PlanetaryHour) => {
  if ('Notification' in window) {
    new Notification(`Now is ${nextHour.planet} hour`, {
      body: `${formatTime(nextHour.startTime)} - ${formatTime(nextHour.endTime)}`,
      icon: `/icons/${nextHour.planet.toLowerCase()}.png`
    });
  }
};
```

## 🧪 Testing Strategy

### Calculation Precision Testing
```tsx
// ✅ Test calculation accuracy for special dates
describe('Planetary Hours Calculation', () => {
  test('Planetary hours should be equal on vernal equinox', () => {
    const vernalEquinox = new Date('2024-03-20');
    const hours = calculatePlanetaryHours(vernalEquinox, { lat: 0, lng: 0 });
    
    // Day and night planetary hours should be equal on vernal equinox
    const dayDuration = hours.dayHours[0].duration;
    const nightDuration = hours.nightHours[0].duration;
    
    expect(Math.abs(dayDuration - nightDuration)).toBeLessThan(1); // Error less than 1 minute
  });
});
```

## 🌍 Language Standards for Astronomical Application

### Code Naming Standards
```tsx
// ✅ Correct: English naming for all code structures
interface PlanetaryHourCalculationResult {
  currentHour: PlanetaryHour;
  todayHours: DailyPlanetaryHours;
  calculationTimestamp: Date;
}

const planetNames: Record<Planet, string> = {
  Sun: 'Sun',
  Moon: 'Moon',
  Mars: 'Mars',
  Mercury: 'Mercury',
  Jupiter: 'Jupiter',
  Venus: 'Venus',
  Saturn: 'Saturn'
};

function calculateHourDuration(sunrise: Date, sunset: Date): number {
  console.log('计算行星时长度...'); // ✅ Chinese in logs is acceptable
  return duration;
}

// ❌ Incorrect: Chinese in code structure
interface 行星时计算结果 {
  当前时: PlanetaryHour;
}
```

### API Endpoint Standards
```tsx
// ✅ Correct: English API routes
/api/maps/geocode
/api/maps/timezone
/api/planetary-hours/calculate
/api/user/preferences

// ❌ Incorrect: Chinese in API routes
/api/地图/地理编码
/api/行星时/计算
```

---

These specialized guidelines ensure the planetary hours calculator application has professional astronomical calculation precision and excellent user experience.