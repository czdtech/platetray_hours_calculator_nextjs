---
description: 限制 AI 自动执行启动命令和长时间运行的进程，确保用户对开发环境的控制。
alwaysApply: true
---
# Command Execution Restrictions

## 🚫 命令执行限制规则

**重要：不要自动执行任何启动命令或长时间运行的进程！**

### 禁止自动执行的命令

当需要运行以下命令时，**不要直接执行**，而是告诉用户让他们手动运行：

#### 🔴 绝对禁止自动执行：
- `yarn dev` - 开发服务器启动
- `npm run dev` - 开发服务器启动（即使不应该用 npm）
- `yarn start` - 生产服务器启动
- `yarn build` - 生产构建（除非用户明确要求测试构建）
- 任何会启动服务器的命令
- 任何长时间运行的进程
- 任何会占用终端的命令

### 正确的处理方式

**✅ 应该这样做：**
- 告诉用户："请在您的终端中运行 `yarn dev` 来启动开发服务器"
- 提供命令建议，但让用户自己执行
- 解释为什么需要运行这个命令
- 提供完整的命令和参数

**❌ 不要这样做：**
- 使用 `run_terminal_cmd` 执行启动命令
- 自动启动开发服务器
- 在后台运行长时间进程

### 允许执行的命令

以下短期、非阻塞的命令可以执行：

#### 🟢 允许自动执行：
- `yarn install` - 安装依赖
- `yarn add package-name` - 添加依赖
- `yarn remove package-name` - 移除依赖
- `yarn lint` - 代码检查
- `yarn typecheck` - 类型检查
- `yarn clean` - 清理缓存
- `ls`, `cat`, `grep` 等文件系统操作
- `git` 命令（除了 push 等敏感操作）
- 其他不会启动服务器的短期命令

### 用户偏好说明

**用户通常在开发时会：**
- 在自己的终端/命令行工具中运行开发服务器
- 保持对服务器进程的完全控制
- 需要看到完整的日志输出
- 可能需要重启或停止服务器

**因此 AI 不应该：**
- 代替用户启动服务器
- 在后台运行服务器进程
- 假设用户希望自动启动服务

### 示例对话

**用户说："启动项目"**

**❌ 错误回应：**
```bash
yarn dev  # 直接执行
```

**✅ 正确回应：**
"请在您的终端中运行以下命令来启动开发服务器：

```bash
yarn dev
```

这将启动 Next.js 开发服务器，通常会在 http://localhost:3000 上运行。"

### 特殊情况

如果用户明确要求执行构建命令进行测试，可以询问确认：

"您是否希望我执行 `yarn build` 来测试构建过程？这不会启动服务器，只是验证项目能否正确构建。"
