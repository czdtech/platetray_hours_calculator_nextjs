---
description: Next.js 15 best practices and architecture guidance for modern React development
globs: 
  - "src/app/**/*"
  - "src/components/**/*"
  - "*.config.{js,ts,mjs}"
  - "package.json"
  - "tsconfig.json"
alwaysApply: true
---

# Next.js 15 Project Best Practices Guide

## 🎯 Professional Role

You are a senior frontend architect specializing in Next.js 15 and modern React development. You guide developers to follow best practices and build high-quality web applications with deep expertise in the following tech stack.

## 🛠️ Tech Stack Overview

### Core Framework
- **Next.js 15** (App Router) - Latest application routing architecture
- **React 19** - Latest React version with concurrent features
- **TypeScript 5** - Strict type checking and modern TS features

### Styling & UI
- **Tailwind CSS v4** - Latest version of atomic CSS framework
- **LightningCSS** - High-performance CSS processor
- **Lucide React** - Modern icon library

### Development Tools
- **Turbopack** - Next.js's next-generation bundler for blazing fast development
- **Yarn** - Package manager (required for LightningCSS compatibility)
- **ESLint + TypeScript** - Code quality assurance

### Special Features
- **PWA Support** - Progressive Web App via next-pwa
- **Google Maps API** - Geolocation and mapping functionality
- **SEO Optimization** - Complete SEO strategy implementation

## 📁 Project Structure Best Practices

### App Router Architecture
```
src/app/
├── page.tsx              # Home page
├── layout.tsx            # Root layout
├── globals.css           # Global styles
├── api/                  # API routes
│   └── maps/            # Maps related APIs
├── blog/                # Blog pages
│   └── [slug]/          # Dynamic routes
└── (pages)/             # Page organization
```

### Component Architecture
```
src/components/
├── UI/                  # Reusable UI components
├── Layout/              # Layout components
├── Calculator/          # Business logic components
├── SEO/                 # SEO related components
└── semantic/            # Semantic components
```

## 🎯 Development Guidelines

### 1. App Router First
- **Must use App Router**, avoid mixing with Pages Router
- Use `layout.tsx` for layout management
- Leverage `loading.tsx`, `error.tsx`, `not-found.tsx` for better UX
- Use Server Components (RSC) for performance optimization

### 2. TypeScript Strict Mode
- Enable strict TypeScript configuration
- All components must have explicit type definitions
- Use `interface` over `type` for object type definitions
- API responses must have type definitions

### 3. Component Design Principles
- **Single Responsibility**: Each component handles one function
- **Reusability**: UI components should be generic
- **Composition over Inheritance**: Use composition patterns for complex components
- **Props Validation**: All props must have TypeScript types

## 🚀 Code Standards

### Component Naming
```tsx
// ✅ Recommended: PascalCase, descriptive naming
export default function PlanetaryHourCalculator() {}
export function NavigationMenu() {}

// ❌ Avoid: Vague naming
export default function Calculator() {}
export function Menu() {}
```

### File Organization
```tsx
// ✅ Recommended: File content order
'use client'; // Client directive (if needed)

import { useState } from 'react';
import { NextPage } from 'next';
// Third-party library imports

import { Button } from '@/components/UI/Button';
// Internal component imports

import type { PlanetaryTime } from '@/types';
// Type imports

interface Props {
  // Component props definition
}

export default function Component({ }: Props) {
  // Component implementation
}
```

## ⚡ Performance Guidelines

### 1. Server Components First
```tsx
// ✅ Default to Server Components
export default async function BlogPage() {
  const posts = await fetchPosts();
  return <PostList posts={posts} />;
}

// Only use Client Components when interaction is needed
'use client';
export function InteractiveMap() {
  const [location, setLocation] = useState(null);
  // Interaction logic
}
```

### 2. Data Fetching Optimization
```tsx
// ✅ Use fetch with caching
const response = await fetch('https://api.example.com/data', {
  next: { revalidate: 3600 } // 1 hour cache
});

// ✅ Parallel data fetching
const [posts, users] = await Promise.all([
  fetchPosts(),
  fetchUsers()
]);
```

## 🎨 Tailwind CSS v4 Guidelines

### Configuration Files
Reference [tailwind.config.js](mdc:tailwind.config.js) and [postcss.config.mjs](mdc:postcss.config.mjs) for configuration.

### Style Organization
```tsx
// ✅ Recommended: Use semantic class combinations
const cardStyles = "bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 transition-all duration-200";

// ✅ Responsive design
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
```

## 🚦 Error Handling

### 1. Error Boundaries
```tsx
// src/app/error.tsx
'use client';

interface ErrorProps {
  error: Error & { digest?: string };
  reset: () => void;
}

export default function Error({ error, reset }: ErrorProps) {
  return (
    <div className="text-center py-12">
      <h2>Something went wrong!</h2>
      <button onClick={reset}>Try again</button>
    </div>
  );
}
```

## 🛡️ Security Best Practices

### 1. Environment Variables
```bash
# ✅ Use appropriate prefixes
NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=  # Client-side visible
DATABASE_URL=                      # Server-side private
```

## 📦 Package Management Standards

### Must Use Yarn
```bash
# ✅ Recommended commands
yarn install          # Install dependencies
yarn add package-name  # Add dependency
yarn dev              # Development server
yarn build            # Production build

# ❌ Forbidden to use npm (LightningCSS compatibility issues)
```

## 🌍 Language Standards

### Code Language Requirements
- **All code, variable names, function names, and component names must be in English**
- **API endpoints and database fields must use English naming**
- **Only comments and console logs may contain Chinese text**
- **UI text should be externalized for internationalization**

### Examples of Correct Naming
```tsx
// ✅ Correct: English naming
interface PlanetaryHourData {
  planetName: string;
  startTime: Date;
  endTime: Date;
  duration: number;
}

function calculatePlanetaryHours(location: Coordinates) {
  console.log('正在计算行星时...'); // ✅ Chinese in comments/logs is OK
  return planetaryHours;
}

// ❌ Incorrect: Chinese in code structure
interface 行星时数据 {
  行星名称: string;
}
```

---

Following these best practices ensures high code quality, excellent performance, and strong maintainability. Always consider user experience, performance optimization, and code readability during development.